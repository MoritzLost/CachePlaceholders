<?php

namespace ProcessWire;

class CachePlaceholders extends Wire implements Module
{
    /** @var string The default start delimiter for tokens. */
    public const DEFAULT_DELIMITER_START = '{{{';

    /** @var string The default end delimiter for tokens. */
    public const DEFAULT_DELIMITER_END = '}}}';

    /** @var string The default delimiter between the token name and each individual parameter. */
    public const DEFAULT_DELIMITER_PARAMETERS = '::';

    /** @var string The default delimiter to split a parameter into a key => value pair. */
    public const DEFAULT_DELIMITER_KEY_VALUE = '=';

    /** @var string The default delimiter for a multivalue parameter. */
    public const DEFAULT_DELIMITER_MULTIVALUE = '|';

    /** @var string The array key used to store the callback inside the token data. */
    public const TOKEN_KEY_CALLBACK = 'callback';

    /** @var string Partial regular expression for matching the name of a token only */
    public const TOKEN_NAME_REGEX = '[a-zA-Z0-9_-]+';

    /** @var string Name of the dedicated log file for this module. */
    public const LOG_NAME = 'cache-tokens';

    /** @var int Default length of the string returned by the random_hex token. */
    public const TOKEN_RANDOM_HEX_DEFAULT_LENGTH = 16;

    public static function getModuleInfo()
    {
        return [
            'title' => __('Cacheable Placeholders'),
            'version' => '1.0.0',
            'author' => "Moritz L'Hoest",
            'href' => 'https://github.com/MoritzLost/CachePlaceholders',
            'summary' => __('Allows you to cache dynamic content by using special placeholders that get parsed during every request.'),
            'autoload' => true,
            'icon' => 'thumb-tack',
            'requires' => [
                'PHP>=7.2',
            ],
        ];
    }

    /**
     * Automatically called by ProcessWire during initialization. Registers
     * required hooks.
     *
     * @return void
     */
    public function ready()
    {
        if (!$this->PageRenderHookActive) return;
        if ($this->PageRenderHookFrontendOnly && $this->wire('page')->rootParent->id == 2) return;
        $this->addHookAfter('Page::render', $this, 'pageRenderHook');
    }

    /**
     * Called after Page::render to replace tokens in the output. This gets called
     * even when the page is served from the template render cache.
     *
     * @param HookEvent $e
     * @return void
     */
    public function pageRenderHook(HookEvent $e)
    {
        $e->return = $this->replaceTokens($e->return);
    }

    /**
     * Return a list of tokens. The returned array is an associative array where
     * keys are the token name and values an associative array with token information.
     * The only required key for each token is 'callback', which should hold the
     * callback that returns the replacement value for this value. The callback
     * needs to accept a single array argument (which will hold information on
     * the token) and return a string.
     *
     * @return array
     */
    public function ___getTokens(): array
    {
        return [
            'superglobal' => [
                self::TOKEN_KEY_CALLBACK => [$this, 'tokenSuperglobal'],
            ],
            'csrf' => [
                self::TOKEN_KEY_CALLBACK => [$this, 'tokenCSRF'],
            ],
            'random_hex' => [
                self::TOKEN_KEY_CALLBACK => [$this, 'tokenRandomHex'],
            ],
        ];
    }

    /**
     * This is the main function of this module. If you have activated the
     * automatic option in the module configuration, this gets called for every
     * request with the entire generated source code of the page.
     * You can also call this manually to replace any cache tokens within the
     * text you pass it.
     *
     * @param string $text  The text to find and replace tokens in.
     * @return string
     */
    public function ___replaceTokens(string $text): string
    {
        $tokens = $this->getTokens();
        // parse all delimiters that may occur inside a token to get the list of allowed characters for the regex
        $additionalAllowedCharactersInTokens = preg_quote(implode(array_unique(mb_str_split(
            $this->DelimiterParameters . $this->DelimiterKeyValue . $this->DelimiterMultivalue
        ))), '/');
        $regex = sprintf(
            '/%1$s(%5$s)(?:%3$s)?([a-zA-Z0-9%4$s_-]+)?%2$s/u',
            preg_quote($this->DelimiterStart, '/'),
            preg_quote($this->DelimiterEnd, '/'),
            preg_quote($this->DelimiterParameters, '/'),
            $additionalAllowedCharactersInTokens,
            self::TOKEN_NAME_REGEX
        );
        return preg_replace_callback(
            $regex,
            function (array $matches) use ($tokens) {
                $name = $matches[1];
                if (!array_key_exists($name, $tokens)) {
                    // if the name is no defined token, just return the complete match as-is
                    $this->log(sprintf(
                        $this->_('Ignoring token "%s" because no token definition exists. Add the token to getTokens() first.'),
                        $name
                    ));
                    return $matches[0];
                }
                $token = $tokens[$name];
                if (!is_array($token) || !array_key_exists(self::TOKEN_KEY_CALLBACK, $token)) {
                    // the token exists but is missing a callback to parse it
                    throw new \InvalidArgumentException(sprintf(
                        'Token data is invalid or missing the callback (%s).',
                        $name
                    ));
                }
                $callback = $token[self::TOKEN_KEY_CALLBACK];
                if (!is_callable($callback)) {
                    throw new \InvalidArgumentException(sprintf(
                        'Callback for token "%s" must be a callable. Got variable of type %s.',
                        $name,
                        gettype($callback)
                    ));
                }
                $params = isset($matches[2]) ? $matches[2] : null;
                // collect data to pass to the replacement function
                $tokenData = [
                    // the complete original token as it appeared in the text, in case it's needed
                    'original' => $matches[0],
                    // name of the token
                    'name' => $matches[1],
                    // parameters (parsed as an array)
                    'params' => $params ? $this->parseParameters($params) : [],
                    // the raw parameter string, if any
                    'raw_params' => $params,
                ];
                return call_user_func($callback, $tokenData);
            },
            $text
        );
    }

    /**
     * The callback method for the "superglobal" token. This token takes two
     * parameters. The first one is the name of one of PHP's superglobals (in
     * lowercase, without the leading '$_'). The second is an array of string
     * keys that form the path for the replacement value inside the superglobal.
     *
     * For example, consider the following token:
     * {{{superglobal::session::path|to|var}}}
     *
     * This yields the following value:
     * $_SESSION['path']['to']['var']
     *
     * If the path is not valid, an empty string is returned.
     *
     * @param array $tokenData
     * @return string
     */
    public function ___tokenSuperglobal(array $tokenData): string
    {
        $superglobals = [
            'session' => $_SESSION ?? null,
            'request' => $_REQUEST ?? null,
            'get' => $_GET ?? null,
            'post' => $_POST ?? null,
            'cookie' => $_COOKIE ?? null,
            'server' => $_SERVER ?? null,
            'env' => $_ENV ?? null,
        ];
        [$superglobal, $varPath] = $tokenData['params'];
        if (!array_key_exists($superglobal, $superglobals) || null === $superglobals[$superglobal]) {
            $this->log(sprintf(
                $this->_('Token superglobal: Missing superglobal "%1$s". It may have been turned off through your variables_order configuration. See https://www.php.net/manual/en/ini.core.php#ini.variables-order'),
                $superglobal
            ));
            return $tokenData['original'];
        }
        if (!is_array($varPath)) {
            $varPath = [$varPath];
        }
        $val = $this->getDataFromArrayByPath($superglobals[$superglobal], $varPath);
        try {
            return (string) $val;
        } catch (\Throwable $e) {
            $this->log(sprintf(
                $this->_("Token superglobal: Can't convert value of type %s to string."),
                gettype($val)
            ));
            return '';
        }
    }

    /**
     * The callback method for the "csrf" token. This token outputs a CSRF input
     * (HTML input element) using ProcessWire's SessionCSRF.
     * An ID can optionally be passed as the first parameter.
     *
     * @see https://processwire.com/api/ref/session-c-s-r-f/render-input/
     * @param array $tokenData
     * @return string
     */
    public function ___tokenCSRF(array $tokenData): string
    {
        $sessionCSRF = $this->wire('session')->CSRF();
        $id = count($tokenData['params']) > 0 ? reset($tokenData['params']) : null;
        if (null !== $id) {
            return $sessionCSRF->renderInput($id);
        } else {
            return $sessionCSRF->renderInput();
        }
    }

    /**
     * The callback method for the "random_hex" token. This returns a random
     * hexadecimal string of the specified length. Length can only be even.
     *
     * @param array $tokenData
     * @return string
     */
    public function ___tokenRandomHex(array $tokenData): string
    {
        $length = (int) ($tokenData['params'][0] ?? self::TOKEN_RANDOM_HEX_DEFAULT_LENGTH);
        $bytes = $length >= 2 ? (int) floor($length / 2) : 1;
        return bin2hex(random_bytes($bytes));
    }

    /**
     * Helper method to parse the parameters of a token into structured data.
     *
     * @param string $params
     * @return array
     */
    public function parseParameters(string $params): array
    {
        // split into an array of parameters
        $splitParameters = explode($this->DelimiterParameters, $params);
        // this will hold the parsed parameters
        $parsedParameters = [];
        foreach ($splitParameters as $param) {
            // split on the assignment operator (if it exists in the parameter)
            $assignmentSplit = explode($this->DelimiterKeyValue, $param);
            // each parameter may contain only one assignment character
            if (count($assignmentSplit) > 2) {
                throw new \InvalidArgumentException(sprintf(
                    'Each token parameter must not contain more than one assignment operator (%s). Invalid parameter: %s',
                    $this->DelimiterKeyValue,
                    $param
                ));
            }
            // if the assignment operator exists, we treat the parameter as a key => value pair
            $hasKeyAndValue = count($assignmentSplit) === 2;
            $value = $hasKeyAndValue ? $assignmentSplit[1] : $assignmentSplit[0];
            // if the value is a list of values (separated by the multivalue-seperator), explode it into an array
            $parsedValue = strpos($value, $this->DelimiterMultivalue) !== false
                ? explode($this->DelimiterMultivalue, $value)
                : $value;
            if ($hasKeyAndValue) {
                // for key => value pairs, add to the array as an associative entry
                $parsedParameters[$assignmentSplit[0]] = $parsedValue;
            } else {
                // for values without a key, add to the array as a numeric entry
                $parsedParameters[] = $parsedValue;
            }
        }
        return $parsedParameters;
    }

    /**
     * Helper method to access a nested value inside an array. For example:
     *
     * $nested = ['a' => ['nested' => ['array' => 'VALUE']]];
     * $path = ['a', 'nested', 'array'];
     * CachePlaceholders::getDataFromArrayByPath($nested, $path); // 'VALUE'
     *
     * @param array $array      The array to access a value from.
     * @param array $path       Array of string keys that make up the "path" to access in the above array.
     * @param string $default   Default value to return if the path does not exist.
     * @return mixed
     */
    public static function getDataFromArrayByPath(array &$array, array $path, $default = '')
    {
        $lastKey = end($path);
        $currentLevel = &$array;
        foreach ($path as $next) {
            // abort if the next key does not exist on the current level
            if (!isset($currentLevel[$next])) {
                return $default;
            }
            // except for the leaf node, the value on the level needs to be an array
            if ($next !== $lastKey && !(is_array($currentLevel[$next]) || $currentLevel[$next] instanceof \ArrayAccess)) {
                return $default;
            }
            $currentLevel = &$currentLevel[$next];
        }
        return $currentLevel;
    }

    /**
     * Write a message to the log file associated with this module.
     *
     * @param string $message   The message to log.
     * @return boolean
     */
    public function log(string $message): bool
    {
        return $this->wire('log')->save(self::LOG_NAME, $message);
    }
}
